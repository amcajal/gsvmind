################################################################################
#   Project: GSVMind
#
#   File: tests_gsv_nlp.py
#
#   Description: Test definitions for gsv_nlp module,
#		 from GSVMind project.
#
#   Notes: N/A
#
#   Contact: Alberto Martin Cajal, amartin.glimpse23<AT>gmail.com
#
#   URL: https://github.com/amcajal/gsvmind
#
#   License: GNU GPL v3.0
#
#   Copyright (C) 2018 Alberto Martin Cajal
#
#   This file is part of GSVMind.
#
#   GSVMind is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   GSVMind is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

import unittest
import os
import sys
import re
from textblob import TextBlob


sys.path.append('../')

from src import gsv_nlp

################################################################################
# Utility functions: These functions contains functionality required to perform
# the tests, but cannot be include as TestCase class methods because they are
# executed as tests itselfs, so they are added as stand-alone functions.
################################################################################

example_text = '''
The titular threat of The Blob has always struck me as the ultimate movie
monster: Release in the    old days! Do not remember if 1955; an insatiably hungry, amoeba-like mass able to penetrate
virtually any safeguard,    capable of--as a doomed doctor chillingly
describes it--"assimilating flesh on contact. 3 remakes done, or more. Or five? Not sure.
Snide    comparisons to gelatin be damned, it's a concept with the most
devastating of potential    consequences, not unlike the grey   goo scenario
proposed by technological theorists fearful of
artificial    intelligence    run rampant. 3 sad tiggers, eat rice, or Am i wrong?
'''

def get_lemmatize_verbs(blob):
	nvl = [] # NVL stands for new verb list
	for word, tag in blob.tags:
		if tag.startswith("VB"):
			nvl.append(word.lemmatize())
	return nvl


# As defined by LLR_020
def is_word_length_correct(gsvname):
	words = gsvname.split(" ")
	words = filter(None, words)
	if ( (len(words) > 0) and (len(words) <= 5) ):
		return True
	else:
		return False
	
	
# As defined by LLR_019, LLR_021, LLR_022
# This test, in theory, should check that the generated output is either
# an np, a sentence or a verb plus noun. Problem is that there are too
# many possible combinations to search for all. Besides, the
# generated output by the gsv_nlp module is processed, and does not
# match the output generated by TextBlob. The real test should calculate
# all possible processed outputs given an example test, and check if
# the gsv_nlp generates one of them (this will be the real test to do).
# However, given the scope of the project, the test will be left empty.
def are_word_components_correct(gsvname, np, sen, verbs):
	return True


# As defined by LLR_046
def is_output_postprocessed(gsvname):
	temp = gsvname
	temp = re.sub(r'[^a-zA-Z]', ' ', temp)
	temp = re.sub(r'\s *', ' ', temp).strip().title()
	if len(gsvname) == len(temp):
		return True
	else:
		return False
	
################################################################################

class TestGsvNlp(unittest.TestCase):
	'''
	Tested requirements:
		LLR_017, 018, 019, 020, 021, 022, 023, 024
	Description:
		Test the outputs generated by the gsv_nlp module.
	Preconditions:
		TextBlob library applied to the example text used as input
		(see "Input" section).
	Input:
		"example_text", a small well-known text sample.
	Procedure:
		Extract from "example_text" the following data, using TexBlob
			- Noun phrases
			- Sentences
			- Lemmatized verbs
		(Repear the following steps several times)
		- Feed gsv_nlp module the "example_text"
		- Check no exceptions arise
		- Check the output is valid
	Output:
		The output generated by the module (the "gsvname")
	Postconditions:
		N/A
	Expected results:
		No exceptions arise, and module generates a valid output
	Errors:
		Exceptions arise, or output is not valid.
	Side effects:
		N/A
	Notes:
		N/A
	'''
	def test_nlp_output_generation(self):
		# First, obtain data from a well known input text
		blob = TextBlob(example_text) 
		np = blob.noun_phrases
		sen = blob.sentences
		verbs = get_lemmatize_verbs(blob)
		
		# Test it several times to cover more combinations of random outputs
		# Carefull: each iteration can take 1 min
		for i in range(0, 1):
			try:
				gsvname = gsv_nlp.generate_english_phrase(example_text)
				print "\n\nTHE GSV NAME IS:" + gsvname
				self.assertTrue(is_word_length_correct(gsvname), "Word length of output is incorrect")
				self.assertTrue(are_word_components_correct(gsvname, np, sen, verbs), "Output contains incorrect words")
				self.assertTrue(is_output_postprocessed(gsvname), "Output has not been postprocessed")
			except Exception as e:
				print "AN EXCEPTION HAS OCCURRED: " + str(e) + "\n"
				self.assertTrue(False, "gsv_nlp module is broken. Cannot obtain valid output from a well-known input data")
	
################################################################################

if __name__ == '__main__':
	print "*"*20 + "\nRUNNING TESTS FOR MODULE: GSV_NLP\n" + "*"*20 + "\n"
	print "WARNING: This test can last SEVERAL MINUTES (500 seconds in avg)..."
	suite = unittest.TestLoader().loadTestsFromTestCase(TestGsvNlp)
	unittest.TextTestRunner(verbosity=2).run(suite)


'''
Tested requirements:
Description:
Preconditions:
Input:
Procedure:
Output:
Postconditions:
Expected results:
Errors:
Side effects:
Notes:

def test_name_of_test(self):
'''
